server {
    listen 80 default_server;

    server_name drone.beta.gouv.fr;
    include /etc/nginx/snippets/letsencrypt.conf;

    return 301 https://drone.beta.gouv.fr$request_uri;
}

server {
    server_name drone.beta drone.beta.gouv.fr;
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server ipv6only=on;

    ssl_certificate /etc/letsencrypt/live/drone.api.gouv.fr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/drone.api.gouv.fr/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/drone.api.gouv.fr/fullchain.pem;
    include /etc/nginx/snippets/ssl.conf;
    charset     utf-8;
    client_max_body_size 25M;
    rewrite ^/developpers/$  https://drone.beta.gouv.fr/developers permanent;
    rewrite ^([^/]+)/$ $1 permanent;

    include /etc/nginx/snippets/letsencrypt.conf;

    location /map {
        alias /srv/tamer/src/cardinal/;
    }

    location /simulator {
        alias /srv/tamer/src/narwhal/;
    }

    location /developers {
        alias /srv/tamer/doc/;
    }

    location / {
        alias /srv/tamer/src/raccoon/;
    }

}

proxy_cache_path  /srv/tamer/cache levels=1:2 keys_zone=tiles-cache:8m max_size=500000m inactive=1000d;
proxy_temp_path   /srv/tamer/cache/tmp;

upstream wolfapi {
    server unix:///tmp/wolfapi.sock;
}

upstream skunk {
    server unix:///tmp/skunk.sock;
}

upstream skunktiles {
    server unix:///tmp/skunktiles.sock;
}

server {
    server_name drone.api drone.api.gouv.fr;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_certificate /etc/letsencrypt/live/drone.api.gouv.fr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/drone.api.gouv.fr/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/drone.api.gouv.fr/fullchain.pem;
    include /etc/nginx/snippets/ssl.conf;
    charset     utf-8;
    client_max_body_size 25M;

    include /etc/nginx/snippets/letsencrypt.conf;

    # Wolf API positions, tracks and reports.
    location /data/ {
        proxy_pass http://wolfapi/;
    }

    # Wolf gate HTTP to UDP proxy.
    location /proxy/ {
        proxy_pass http://localhost:5006/;
    }

    # Moose API.
    location /account/ {
        # No final / so Gunicorn receives the real path.
        proxy_pass http://localhost:8000;
        # Pass real host to Flask, so url_for with _external=True works.
        proxy_set_header Host $host;
        # Pass the used schema, so Flask knows about it.
        proxy_set_header X-Forwarded-Proto $scheme;
        # Flask/Werkzeug will use SCRIPT_NAME as path prefix.
        proxy_set_header SCRIPT_NAME /account;
    }

    # Skunk API.
    location /flightareas/ {
        proxy_pass http://skunk/;
    }

    # Skunk tiles.
    location /tiles/flightareas/ {
        proxy_cache tiles-cache;
        proxy_cache_valid  200 302  3d;
        proxy_cache_valid  404 500  1m;
        add_header X-Cache-Status $upstream_cache_status;
        proxy_pass http://skunktiles/;
    }

}
